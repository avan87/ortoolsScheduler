// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: scheduler.proto

#ifndef PROTOBUF_scheduler_2eproto__INCLUDED
#define PROTOBUF_scheduler_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3000000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3000000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

// Internal implementation detail -- do not call these.
void protobuf_AddDesc_scheduler_2eproto();
void protobuf_AssignDesc_scheduler_2eproto();
void protobuf_ShutdownFile_scheduler_2eproto();

class Data;
class ExcludeConstraints;
class IncludeConstraints;
class Job;
class Jobs;
class Pair;
class PriorityConstraints;
class SchedulingParameters;
class SchedulingSettingsProvider;
class Worker;
class Workers;

// ===================================================================

class Data : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:Data) */ {
 public:
  Data();
  virtual ~Data();

  Data(const Data& from);

  inline Data& operator=(const Data& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Data& default_instance();

  void Swap(Data* other);

  // implements Message ----------------------------------------------

  inline Data* New() const { return New(NULL); }

  Data* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Data& from);
  void MergeFrom(const Data& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(Data* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .Worker workers = 1;
  int workers_size() const;
  void clear_workers();
  static const int kWorkersFieldNumber = 1;
  const ::Worker& workers(int index) const;
  ::Worker* mutable_workers(int index);
  ::Worker* add_workers();
  ::google::protobuf::RepeatedPtrField< ::Worker >*
      mutable_workers();
  const ::google::protobuf::RepeatedPtrField< ::Worker >&
      workers() const;

  // repeated .Job jobs = 2;
  int jobs_size() const;
  void clear_jobs();
  static const int kJobsFieldNumber = 2;
  const ::Job& jobs(int index) const;
  ::Job* mutable_jobs(int index);
  ::Job* add_jobs();
  ::google::protobuf::RepeatedPtrField< ::Job >*
      mutable_jobs();
  const ::google::protobuf::RepeatedPtrField< ::Job >&
      jobs() const;

  // optional .IncludeConstraints includeConstraints = 3;
  bool has_includeconstraints() const;
  void clear_includeconstraints();
  static const int kIncludeConstraintsFieldNumber = 3;
  const ::IncludeConstraints& includeconstraints() const;
  ::IncludeConstraints* mutable_includeconstraints();
  ::IncludeConstraints* release_includeconstraints();
  void set_allocated_includeconstraints(::IncludeConstraints* includeconstraints);

  // optional .ExcludeConstraints excludeConstraints = 4;
  bool has_excludeconstraints() const;
  void clear_excludeconstraints();
  static const int kExcludeConstraintsFieldNumber = 4;
  const ::ExcludeConstraints& excludeconstraints() const;
  ::ExcludeConstraints* mutable_excludeconstraints();
  ::ExcludeConstraints* release_excludeconstraints();
  void set_allocated_excludeconstraints(::ExcludeConstraints* excludeconstraints);

  // optional .PriorityConstraints priorityConstraints = 5;
  bool has_priorityconstraints() const;
  void clear_priorityconstraints();
  static const int kPriorityConstraintsFieldNumber = 5;
  const ::PriorityConstraints& priorityconstraints() const;
  ::PriorityConstraints* mutable_priorityconstraints();
  ::PriorityConstraints* release_priorityconstraints();
  void set_allocated_priorityconstraints(::PriorityConstraints* priorityconstraints);

  // optional .SchedulingSettingsProvider schedulingSettingsProvider = 6;
  bool has_schedulingsettingsprovider() const;
  void clear_schedulingsettingsprovider();
  static const int kSchedulingSettingsProviderFieldNumber = 6;
  const ::SchedulingSettingsProvider& schedulingsettingsprovider() const;
  ::SchedulingSettingsProvider* mutable_schedulingsettingsprovider();
  ::SchedulingSettingsProvider* release_schedulingsettingsprovider();
  void set_allocated_schedulingsettingsprovider(::SchedulingSettingsProvider* schedulingsettingsprovider);

  // @@protoc_insertion_point(class_scope:Data)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::google::protobuf::RepeatedPtrField< ::Worker > workers_;
  ::google::protobuf::RepeatedPtrField< ::Job > jobs_;
  ::IncludeConstraints* includeconstraints_;
  ::ExcludeConstraints* excludeconstraints_;
  ::PriorityConstraints* priorityconstraints_;
  ::SchedulingSettingsProvider* schedulingsettingsprovider_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_scheduler_2eproto();
  friend void protobuf_AssignDesc_scheduler_2eproto();
  friend void protobuf_ShutdownFile_scheduler_2eproto();

  void InitAsDefaultInstance();
  static Data* default_instance_;
};
// -------------------------------------------------------------------

class Pair : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:Pair) */ {
 public:
  Pair();
  virtual ~Pair();

  Pair(const Pair& from);

  inline Pair& operator=(const Pair& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Pair& default_instance();

  void Swap(Pair* other);

  // implements Message ----------------------------------------------

  inline Pair* New() const { return New(NULL); }

  Pair* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Pair& from);
  void MergeFrom(const Pair& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(Pair* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .Worker worker = 1;
  bool has_worker() const;
  void clear_worker();
  static const int kWorkerFieldNumber = 1;
  const ::Worker& worker() const;
  ::Worker* mutable_worker();
  ::Worker* release_worker();
  void set_allocated_worker(::Worker* worker);

  // optional .Job job = 2;
  bool has_job() const;
  void clear_job();
  static const int kJobFieldNumber = 2;
  const ::Job& job() const;
  ::Job* mutable_job();
  ::Job* release_job();
  void set_allocated_job(::Job* job);

  // @@protoc_insertion_point(class_scope:Pair)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::Worker* worker_;
  ::Job* job_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_scheduler_2eproto();
  friend void protobuf_AssignDesc_scheduler_2eproto();
  friend void protobuf_ShutdownFile_scheduler_2eproto();

  void InitAsDefaultInstance();
  static Pair* default_instance_;
};
// -------------------------------------------------------------------

class IncludeConstraints : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:IncludeConstraints) */ {
 public:
  IncludeConstraints();
  virtual ~IncludeConstraints();

  IncludeConstraints(const IncludeConstraints& from);

  inline IncludeConstraints& operator=(const IncludeConstraints& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const IncludeConstraints& default_instance();

  void Swap(IncludeConstraints* other);

  // implements Message ----------------------------------------------

  inline IncludeConstraints* New() const { return New(NULL); }

  IncludeConstraints* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const IncludeConstraints& from);
  void MergeFrom(const IncludeConstraints& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(IncludeConstraints* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .Pair pair = 1;
  int pair_size() const;
  void clear_pair();
  static const int kPairFieldNumber = 1;
  const ::Pair& pair(int index) const;
  ::Pair* mutable_pair(int index);
  ::Pair* add_pair();
  ::google::protobuf::RepeatedPtrField< ::Pair >*
      mutable_pair();
  const ::google::protobuf::RepeatedPtrField< ::Pair >&
      pair() const;

  // @@protoc_insertion_point(class_scope:IncludeConstraints)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::google::protobuf::RepeatedPtrField< ::Pair > pair_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_scheduler_2eproto();
  friend void protobuf_AssignDesc_scheduler_2eproto();
  friend void protobuf_ShutdownFile_scheduler_2eproto();

  void InitAsDefaultInstance();
  static IncludeConstraints* default_instance_;
};
// -------------------------------------------------------------------

class ExcludeConstraints : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:ExcludeConstraints) */ {
 public:
  ExcludeConstraints();
  virtual ~ExcludeConstraints();

  ExcludeConstraints(const ExcludeConstraints& from);

  inline ExcludeConstraints& operator=(const ExcludeConstraints& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ExcludeConstraints& default_instance();

  void Swap(ExcludeConstraints* other);

  // implements Message ----------------------------------------------

  inline ExcludeConstraints* New() const { return New(NULL); }

  ExcludeConstraints* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ExcludeConstraints& from);
  void MergeFrom(const ExcludeConstraints& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(ExcludeConstraints* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .Pair pair = 1;
  int pair_size() const;
  void clear_pair();
  static const int kPairFieldNumber = 1;
  const ::Pair& pair(int index) const;
  ::Pair* mutable_pair(int index);
  ::Pair* add_pair();
  ::google::protobuf::RepeatedPtrField< ::Pair >*
      mutable_pair();
  const ::google::protobuf::RepeatedPtrField< ::Pair >&
      pair() const;

  // @@protoc_insertion_point(class_scope:ExcludeConstraints)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::google::protobuf::RepeatedPtrField< ::Pair > pair_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_scheduler_2eproto();
  friend void protobuf_AssignDesc_scheduler_2eproto();
  friend void protobuf_ShutdownFile_scheduler_2eproto();

  void InitAsDefaultInstance();
  static ExcludeConstraints* default_instance_;
};
// -------------------------------------------------------------------

class PriorityConstraints : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:PriorityConstraints) */ {
 public:
  PriorityConstraints();
  virtual ~PriorityConstraints();

  PriorityConstraints(const PriorityConstraints& from);

  inline PriorityConstraints& operator=(const PriorityConstraints& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const PriorityConstraints& default_instance();

  void Swap(PriorityConstraints* other);

  // implements Message ----------------------------------------------

  inline PriorityConstraints* New() const { return New(NULL); }

  PriorityConstraints* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const PriorityConstraints& from);
  void MergeFrom(const PriorityConstraints& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(PriorityConstraints* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .Pair pair = 1;
  int pair_size() const;
  void clear_pair();
  static const int kPairFieldNumber = 1;
  const ::Pair& pair(int index) const;
  ::Pair* mutable_pair(int index);
  ::Pair* add_pair();
  ::google::protobuf::RepeatedPtrField< ::Pair >*
      mutable_pair();
  const ::google::protobuf::RepeatedPtrField< ::Pair >&
      pair() const;

  // @@protoc_insertion_point(class_scope:PriorityConstraints)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::google::protobuf::RepeatedPtrField< ::Pair > pair_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_scheduler_2eproto();
  friend void protobuf_AssignDesc_scheduler_2eproto();
  friend void protobuf_ShutdownFile_scheduler_2eproto();

  void InitAsDefaultInstance();
  static PriorityConstraints* default_instance_;
};
// -------------------------------------------------------------------

class SchedulingSettingsProvider : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:SchedulingSettingsProvider) */ {
 public:
  SchedulingSettingsProvider();
  virtual ~SchedulingSettingsProvider();

  SchedulingSettingsProvider(const SchedulingSettingsProvider& from);

  inline SchedulingSettingsProvider& operator=(const SchedulingSettingsProvider& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const SchedulingSettingsProvider& default_instance();

  void Swap(SchedulingSettingsProvider* other);

  // implements Message ----------------------------------------------

  inline SchedulingSettingsProvider* New() const { return New(NULL); }

  SchedulingSettingsProvider* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const SchedulingSettingsProvider& from);
  void MergeFrom(const SchedulingSettingsProvider& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(SchedulingSettingsProvider* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional bool MaximizeFleetLoad = 1;
  void clear_maximizefleetload();
  static const int kMaximizeFleetLoadFieldNumber = 1;
  bool maximizefleetload() const;
  void set_maximizefleetload(bool value);

  // optional int32 WeightFactor = 2;
  void clear_weightfactor();
  static const int kWeightFactorFieldNumber = 2;
  ::google::protobuf::int32 weightfactor() const;
  void set_weightfactor(::google::protobuf::int32 value);

  // optional int32 IsoRefFactor = 3;
  void clear_isoreffactor();
  static const int kIsoRefFactorFieldNumber = 3;
  ::google::protobuf::int32 isoreffactor() const;
  void set_isoreffactor(::google::protobuf::int32 value);

  // optional int32 RatingFactor = 4;
  void clear_ratingfactor();
  static const int kRatingFactorFieldNumber = 4;
  ::google::protobuf::int32 ratingfactor() const;
  void set_ratingfactor(::google::protobuf::int32 value);

  // optional int32 TimeFactor = 5;
  void clear_timefactor();
  static const int kTimeFactorFieldNumber = 5;
  ::google::protobuf::int32 timefactor() const;
  void set_timefactor(::google::protobuf::int32 value);

  // optional int32 TransitionFactor = 6;
  void clear_transitionfactor();
  static const int kTransitionFactorFieldNumber = 6;
  ::google::protobuf::int32 transitionfactor() const;
  void set_transitionfactor(::google::protobuf::int32 value);

  // optional int32 PayFactor = 7;
  void clear_payfactor();
  static const int kPayFactorFieldNumber = 7;
  ::google::protobuf::int32 payfactor() const;
  void set_payfactor(::google::protobuf::int32 value);

  // optional int32 LegFactor = 8;
  void clear_legfactor();
  static const int kLegFactorFieldNumber = 8;
  ::google::protobuf::int32 legfactor() const;
  void set_legfactor(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:SchedulingSettingsProvider)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  bool maximizefleetload_;
  ::google::protobuf::int32 weightfactor_;
  ::google::protobuf::int32 isoreffactor_;
  ::google::protobuf::int32 ratingfactor_;
  ::google::protobuf::int32 timefactor_;
  ::google::protobuf::int32 transitionfactor_;
  ::google::protobuf::int32 payfactor_;
  ::google::protobuf::int32 legfactor_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_scheduler_2eproto();
  friend void protobuf_AssignDesc_scheduler_2eproto();
  friend void protobuf_ShutdownFile_scheduler_2eproto();

  void InitAsDefaultInstance();
  static SchedulingSettingsProvider* default_instance_;
};
// -------------------------------------------------------------------

class SchedulingParameters : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:SchedulingParameters) */ {
 public:
  SchedulingParameters();
  virtual ~SchedulingParameters();

  SchedulingParameters(const SchedulingParameters& from);

  inline SchedulingParameters& operator=(const SchedulingParameters& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const SchedulingParameters& default_instance();

  void Swap(SchedulingParameters* other);

  // implements Message ----------------------------------------------

  inline SchedulingParameters* New() const { return New(NULL); }

  SchedulingParameters* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const SchedulingParameters& from);
  void MergeFrom(const SchedulingParameters& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(SchedulingParameters* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional bool Ref = 1;
  void clear_ref();
  static const int kRefFieldNumber = 1;
  bool ref() const;
  void set_ref(bool value);

  // optional bool Iso = 2;
  void clear_iso();
  static const int kIsoFieldNumber = 2;
  bool iso() const;
  void set_iso(bool value);

  // optional int32 Rating = 3;
  void clear_rating();
  static const int kRatingFieldNumber = 3;
  ::google::protobuf::int32 rating() const;
  void set_rating(::google::protobuf::int32 value);

  // optional string GroupId = 4;
  void clear_groupid();
  static const int kGroupIdFieldNumber = 4;
  const ::std::string& groupid() const;
  void set_groupid(const ::std::string& value);
  void set_groupid(const char* value);
  void set_groupid(const char* value, size_t size);
  ::std::string* mutable_groupid();
  ::std::string* release_groupid();
  void set_allocated_groupid(::std::string* groupid);

  // @@protoc_insertion_point(class_scope:SchedulingParameters)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  bool ref_;
  bool iso_;
  ::google::protobuf::int32 rating_;
  ::google::protobuf::internal::ArenaStringPtr groupid_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_scheduler_2eproto();
  friend void protobuf_AssignDesc_scheduler_2eproto();
  friend void protobuf_ShutdownFile_scheduler_2eproto();

  void InitAsDefaultInstance();
  static SchedulingParameters* default_instance_;
};
// -------------------------------------------------------------------

class Worker : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:Worker) */ {
 public:
  Worker();
  virtual ~Worker();

  Worker(const Worker& from);

  inline Worker& operator=(const Worker& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Worker& default_instance();

  void Swap(Worker* other);

  // implements Message ----------------------------------------------

  inline Worker* New() const { return New(NULL); }

  Worker* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Worker& from);
  void MergeFrom(const Worker& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(Worker* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string Id = 1;
  void clear_id();
  static const int kIdFieldNumber = 1;
  const ::std::string& id() const;
  void set_id(const ::std::string& value);
  void set_id(const char* value);
  void set_id(const char* value, size_t size);
  ::std::string* mutable_id();
  ::std::string* release_id();
  void set_allocated_id(::std::string* id);

  // optional int32 Cost = 2;
  void clear_cost();
  static const int kCostFieldNumber = 2;
  ::google::protobuf::int32 cost() const;
  void set_cost(::google::protobuf::int32 value);

  // optional string Name = 3;
  void clear_name();
  static const int kNameFieldNumber = 3;
  const ::std::string& name() const;
  void set_name(const ::std::string& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  ::std::string* mutable_name();
  ::std::string* release_name();
  void set_allocated_name(::std::string* name);

  // optional double X = 4;
  void clear_x();
  static const int kXFieldNumber = 4;
  double x() const;
  void set_x(double value);

  // optional double Y = 5;
  void clear_y();
  static const int kYFieldNumber = 5;
  double y() const;
  void set_y(double value);

  // optional .SchedulingParameters Parameters = 6;
  bool has_parameters() const;
  void clear_parameters();
  static const int kParametersFieldNumber = 6;
  const ::SchedulingParameters& parameters() const;
  ::SchedulingParameters* mutable_parameters();
  ::SchedulingParameters* release_parameters();
  void set_allocated_parameters(::SchedulingParameters* parameters);

  // @@protoc_insertion_point(class_scope:Worker)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::google::protobuf::internal::ArenaStringPtr id_;
  ::google::protobuf::internal::ArenaStringPtr name_;
  double x_;
  double y_;
  ::SchedulingParameters* parameters_;
  ::google::protobuf::int32 cost_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_scheduler_2eproto();
  friend void protobuf_AssignDesc_scheduler_2eproto();
  friend void protobuf_ShutdownFile_scheduler_2eproto();

  void InitAsDefaultInstance();
  static Worker* default_instance_;
};
// -------------------------------------------------------------------

class Job : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:Job) */ {
 public:
  Job();
  virtual ~Job();

  Job(const Job& from);

  inline Job& operator=(const Job& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Job& default_instance();

  void Swap(Job* other);

  // implements Message ----------------------------------------------

  inline Job* New() const { return New(NULL); }

  Job* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Job& from);
  void MergeFrom(const Job& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(Job* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string Id = 1;
  void clear_id();
  static const int kIdFieldNumber = 1;
  const ::std::string& id() const;
  void set_id(const ::std::string& value);
  void set_id(const char* value);
  void set_id(const char* value, size_t size);
  ::std::string* mutable_id();
  ::std::string* release_id();
  void set_allocated_id(::std::string* id);

  // optional string Start = 2;
  void clear_start();
  static const int kStartFieldNumber = 2;
  const ::std::string& start() const;
  void set_start(const ::std::string& value);
  void set_start(const char* value);
  void set_start(const char* value, size_t size);
  ::std::string* mutable_start();
  ::std::string* release_start();
  void set_allocated_start(::std::string* start);

  // optional string End = 3;
  void clear_end();
  static const int kEndFieldNumber = 3;
  const ::std::string& end() const;
  void set_end(const ::std::string& value);
  void set_end(const char* value);
  void set_end(const char* value, size_t size);
  ::std::string* mutable_end();
  ::std::string* release_end();
  void set_allocated_end(::std::string* end);

  // optional int32 Cost = 4;
  void clear_cost();
  static const int kCostFieldNumber = 4;
  ::google::protobuf::int32 cost() const;
  void set_cost(::google::protobuf::int32 value);

  // optional string Name = 5;
  void clear_name();
  static const int kNameFieldNumber = 5;
  const ::std::string& name() const;
  void set_name(const ::std::string& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  ::std::string* mutable_name();
  ::std::string* release_name();
  void set_allocated_name(::std::string* name);

  // optional double X = 6;
  void clear_x();
  static const int kXFieldNumber = 6;
  double x() const;
  void set_x(double value);

  // optional double Y = 7;
  void clear_y();
  static const int kYFieldNumber = 7;
  double y() const;
  void set_y(double value);

  // optional .SchedulingParameters Parameters = 8;
  bool has_parameters() const;
  void clear_parameters();
  static const int kParametersFieldNumber = 8;
  const ::SchedulingParameters& parameters() const;
  ::SchedulingParameters* mutable_parameters();
  ::SchedulingParameters* release_parameters();
  void set_allocated_parameters(::SchedulingParameters* parameters);

  // @@protoc_insertion_point(class_scope:Job)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::google::protobuf::internal::ArenaStringPtr id_;
  ::google::protobuf::internal::ArenaStringPtr start_;
  ::google::protobuf::internal::ArenaStringPtr end_;
  ::google::protobuf::internal::ArenaStringPtr name_;
  double x_;
  double y_;
  ::SchedulingParameters* parameters_;
  ::google::protobuf::int32 cost_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_scheduler_2eproto();
  friend void protobuf_AssignDesc_scheduler_2eproto();
  friend void protobuf_ShutdownFile_scheduler_2eproto();

  void InitAsDefaultInstance();
  static Job* default_instance_;
};
// -------------------------------------------------------------------

class Workers : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:Workers) */ {
 public:
  Workers();
  virtual ~Workers();

  Workers(const Workers& from);

  inline Workers& operator=(const Workers& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Workers& default_instance();

  void Swap(Workers* other);

  // implements Message ----------------------------------------------

  inline Workers* New() const { return New(NULL); }

  Workers* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Workers& from);
  void MergeFrom(const Workers& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(Workers* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .Worker workers = 1;
  int workers_size() const;
  void clear_workers();
  static const int kWorkersFieldNumber = 1;
  const ::Worker& workers(int index) const;
  ::Worker* mutable_workers(int index);
  ::Worker* add_workers();
  ::google::protobuf::RepeatedPtrField< ::Worker >*
      mutable_workers();
  const ::google::protobuf::RepeatedPtrField< ::Worker >&
      workers() const;

  // @@protoc_insertion_point(class_scope:Workers)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::google::protobuf::RepeatedPtrField< ::Worker > workers_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_scheduler_2eproto();
  friend void protobuf_AssignDesc_scheduler_2eproto();
  friend void protobuf_ShutdownFile_scheduler_2eproto();

  void InitAsDefaultInstance();
  static Workers* default_instance_;
};
// -------------------------------------------------------------------

class Jobs : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:Jobs) */ {
 public:
  Jobs();
  virtual ~Jobs();

  Jobs(const Jobs& from);

  inline Jobs& operator=(const Jobs& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Jobs& default_instance();

  void Swap(Jobs* other);

  // implements Message ----------------------------------------------

  inline Jobs* New() const { return New(NULL); }

  Jobs* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Jobs& from);
  void MergeFrom(const Jobs& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(Jobs* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .Job jobs = 1;
  int jobs_size() const;
  void clear_jobs();
  static const int kJobsFieldNumber = 1;
  const ::Job& jobs(int index) const;
  ::Job* mutable_jobs(int index);
  ::Job* add_jobs();
  ::google::protobuf::RepeatedPtrField< ::Job >*
      mutable_jobs();
  const ::google::protobuf::RepeatedPtrField< ::Job >&
      jobs() const;

  // @@protoc_insertion_point(class_scope:Jobs)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::google::protobuf::RepeatedPtrField< ::Job > jobs_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_scheduler_2eproto();
  friend void protobuf_AssignDesc_scheduler_2eproto();
  friend void protobuf_ShutdownFile_scheduler_2eproto();

  void InitAsDefaultInstance();
  static Jobs* default_instance_;
};
// ===================================================================


// ===================================================================

#if !PROTOBUF_INLINE_NOT_IN_HEADERS
// Data

// repeated .Worker workers = 1;
inline int Data::workers_size() const {
  return workers_.size();
}
inline void Data::clear_workers() {
  workers_.Clear();
}
inline const ::Worker& Data::workers(int index) const {
  // @@protoc_insertion_point(field_get:Data.workers)
  return workers_.Get(index);
}
inline ::Worker* Data::mutable_workers(int index) {
  // @@protoc_insertion_point(field_mutable:Data.workers)
  return workers_.Mutable(index);
}
inline ::Worker* Data::add_workers() {
  // @@protoc_insertion_point(field_add:Data.workers)
  return workers_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::Worker >*
Data::mutable_workers() {
  // @@protoc_insertion_point(field_mutable_list:Data.workers)
  return &workers_;
}
inline const ::google::protobuf::RepeatedPtrField< ::Worker >&
Data::workers() const {
  // @@protoc_insertion_point(field_list:Data.workers)
  return workers_;
}

// repeated .Job jobs = 2;
inline int Data::jobs_size() const {
  return jobs_.size();
}
inline void Data::clear_jobs() {
  jobs_.Clear();
}
inline const ::Job& Data::jobs(int index) const {
  // @@protoc_insertion_point(field_get:Data.jobs)
  return jobs_.Get(index);
}
inline ::Job* Data::mutable_jobs(int index) {
  // @@protoc_insertion_point(field_mutable:Data.jobs)
  return jobs_.Mutable(index);
}
inline ::Job* Data::add_jobs() {
  // @@protoc_insertion_point(field_add:Data.jobs)
  return jobs_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::Job >*
Data::mutable_jobs() {
  // @@protoc_insertion_point(field_mutable_list:Data.jobs)
  return &jobs_;
}
inline const ::google::protobuf::RepeatedPtrField< ::Job >&
Data::jobs() const {
  // @@protoc_insertion_point(field_list:Data.jobs)
  return jobs_;
}

// optional .IncludeConstraints includeConstraints = 3;
inline bool Data::has_includeconstraints() const {
  return !_is_default_instance_ && includeconstraints_ != NULL;
}
inline void Data::clear_includeconstraints() {
  if (GetArenaNoVirtual() == NULL && includeconstraints_ != NULL) delete includeconstraints_;
  includeconstraints_ = NULL;
}
inline const ::IncludeConstraints& Data::includeconstraints() const {
  // @@protoc_insertion_point(field_get:Data.includeConstraints)
  return includeconstraints_ != NULL ? *includeconstraints_ : *default_instance_->includeconstraints_;
}
inline ::IncludeConstraints* Data::mutable_includeconstraints() {
  
  if (includeconstraints_ == NULL) {
    includeconstraints_ = new ::IncludeConstraints;
  }
  // @@protoc_insertion_point(field_mutable:Data.includeConstraints)
  return includeconstraints_;
}
inline ::IncludeConstraints* Data::release_includeconstraints() {
  // @@protoc_insertion_point(field_release:Data.includeConstraints)
  
  ::IncludeConstraints* temp = includeconstraints_;
  includeconstraints_ = NULL;
  return temp;
}
inline void Data::set_allocated_includeconstraints(::IncludeConstraints* includeconstraints) {
  delete includeconstraints_;
  includeconstraints_ = includeconstraints;
  if (includeconstraints) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:Data.includeConstraints)
}

// optional .ExcludeConstraints excludeConstraints = 4;
inline bool Data::has_excludeconstraints() const {
  return !_is_default_instance_ && excludeconstraints_ != NULL;
}
inline void Data::clear_excludeconstraints() {
  if (GetArenaNoVirtual() == NULL && excludeconstraints_ != NULL) delete excludeconstraints_;
  excludeconstraints_ = NULL;
}
inline const ::ExcludeConstraints& Data::excludeconstraints() const {
  // @@protoc_insertion_point(field_get:Data.excludeConstraints)
  return excludeconstraints_ != NULL ? *excludeconstraints_ : *default_instance_->excludeconstraints_;
}
inline ::ExcludeConstraints* Data::mutable_excludeconstraints() {
  
  if (excludeconstraints_ == NULL) {
    excludeconstraints_ = new ::ExcludeConstraints;
  }
  // @@protoc_insertion_point(field_mutable:Data.excludeConstraints)
  return excludeconstraints_;
}
inline ::ExcludeConstraints* Data::release_excludeconstraints() {
  // @@protoc_insertion_point(field_release:Data.excludeConstraints)
  
  ::ExcludeConstraints* temp = excludeconstraints_;
  excludeconstraints_ = NULL;
  return temp;
}
inline void Data::set_allocated_excludeconstraints(::ExcludeConstraints* excludeconstraints) {
  delete excludeconstraints_;
  excludeconstraints_ = excludeconstraints;
  if (excludeconstraints) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:Data.excludeConstraints)
}

// optional .PriorityConstraints priorityConstraints = 5;
inline bool Data::has_priorityconstraints() const {
  return !_is_default_instance_ && priorityconstraints_ != NULL;
}
inline void Data::clear_priorityconstraints() {
  if (GetArenaNoVirtual() == NULL && priorityconstraints_ != NULL) delete priorityconstraints_;
  priorityconstraints_ = NULL;
}
inline const ::PriorityConstraints& Data::priorityconstraints() const {
  // @@protoc_insertion_point(field_get:Data.priorityConstraints)
  return priorityconstraints_ != NULL ? *priorityconstraints_ : *default_instance_->priorityconstraints_;
}
inline ::PriorityConstraints* Data::mutable_priorityconstraints() {
  
  if (priorityconstraints_ == NULL) {
    priorityconstraints_ = new ::PriorityConstraints;
  }
  // @@protoc_insertion_point(field_mutable:Data.priorityConstraints)
  return priorityconstraints_;
}
inline ::PriorityConstraints* Data::release_priorityconstraints() {
  // @@protoc_insertion_point(field_release:Data.priorityConstraints)
  
  ::PriorityConstraints* temp = priorityconstraints_;
  priorityconstraints_ = NULL;
  return temp;
}
inline void Data::set_allocated_priorityconstraints(::PriorityConstraints* priorityconstraints) {
  delete priorityconstraints_;
  priorityconstraints_ = priorityconstraints;
  if (priorityconstraints) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:Data.priorityConstraints)
}

// optional .SchedulingSettingsProvider schedulingSettingsProvider = 6;
inline bool Data::has_schedulingsettingsprovider() const {
  return !_is_default_instance_ && schedulingsettingsprovider_ != NULL;
}
inline void Data::clear_schedulingsettingsprovider() {
  if (GetArenaNoVirtual() == NULL && schedulingsettingsprovider_ != NULL) delete schedulingsettingsprovider_;
  schedulingsettingsprovider_ = NULL;
}
inline const ::SchedulingSettingsProvider& Data::schedulingsettingsprovider() const {
  // @@protoc_insertion_point(field_get:Data.schedulingSettingsProvider)
  return schedulingsettingsprovider_ != NULL ? *schedulingsettingsprovider_ : *default_instance_->schedulingsettingsprovider_;
}
inline ::SchedulingSettingsProvider* Data::mutable_schedulingsettingsprovider() {
  
  if (schedulingsettingsprovider_ == NULL) {
    schedulingsettingsprovider_ = new ::SchedulingSettingsProvider;
  }
  // @@protoc_insertion_point(field_mutable:Data.schedulingSettingsProvider)
  return schedulingsettingsprovider_;
}
inline ::SchedulingSettingsProvider* Data::release_schedulingsettingsprovider() {
  // @@protoc_insertion_point(field_release:Data.schedulingSettingsProvider)
  
  ::SchedulingSettingsProvider* temp = schedulingsettingsprovider_;
  schedulingsettingsprovider_ = NULL;
  return temp;
}
inline void Data::set_allocated_schedulingsettingsprovider(::SchedulingSettingsProvider* schedulingsettingsprovider) {
  delete schedulingsettingsprovider_;
  schedulingsettingsprovider_ = schedulingsettingsprovider;
  if (schedulingsettingsprovider) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:Data.schedulingSettingsProvider)
}

// -------------------------------------------------------------------

// Pair

// optional .Worker worker = 1;
inline bool Pair::has_worker() const {
  return !_is_default_instance_ && worker_ != NULL;
}
inline void Pair::clear_worker() {
  if (GetArenaNoVirtual() == NULL && worker_ != NULL) delete worker_;
  worker_ = NULL;
}
inline const ::Worker& Pair::worker() const {
  // @@protoc_insertion_point(field_get:Pair.worker)
  return worker_ != NULL ? *worker_ : *default_instance_->worker_;
}
inline ::Worker* Pair::mutable_worker() {
  
  if (worker_ == NULL) {
    worker_ = new ::Worker;
  }
  // @@protoc_insertion_point(field_mutable:Pair.worker)
  return worker_;
}
inline ::Worker* Pair::release_worker() {
  // @@protoc_insertion_point(field_release:Pair.worker)
  
  ::Worker* temp = worker_;
  worker_ = NULL;
  return temp;
}
inline void Pair::set_allocated_worker(::Worker* worker) {
  delete worker_;
  worker_ = worker;
  if (worker) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:Pair.worker)
}

// optional .Job job = 2;
inline bool Pair::has_job() const {
  return !_is_default_instance_ && job_ != NULL;
}
inline void Pair::clear_job() {
  if (GetArenaNoVirtual() == NULL && job_ != NULL) delete job_;
  job_ = NULL;
}
inline const ::Job& Pair::job() const {
  // @@protoc_insertion_point(field_get:Pair.job)
  return job_ != NULL ? *job_ : *default_instance_->job_;
}
inline ::Job* Pair::mutable_job() {
  
  if (job_ == NULL) {
    job_ = new ::Job;
  }
  // @@protoc_insertion_point(field_mutable:Pair.job)
  return job_;
}
inline ::Job* Pair::release_job() {
  // @@protoc_insertion_point(field_release:Pair.job)
  
  ::Job* temp = job_;
  job_ = NULL;
  return temp;
}
inline void Pair::set_allocated_job(::Job* job) {
  delete job_;
  job_ = job;
  if (job) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:Pair.job)
}

// -------------------------------------------------------------------

// IncludeConstraints

// repeated .Pair pair = 1;
inline int IncludeConstraints::pair_size() const {
  return pair_.size();
}
inline void IncludeConstraints::clear_pair() {
  pair_.Clear();
}
inline const ::Pair& IncludeConstraints::pair(int index) const {
  // @@protoc_insertion_point(field_get:IncludeConstraints.pair)
  return pair_.Get(index);
}
inline ::Pair* IncludeConstraints::mutable_pair(int index) {
  // @@protoc_insertion_point(field_mutable:IncludeConstraints.pair)
  return pair_.Mutable(index);
}
inline ::Pair* IncludeConstraints::add_pair() {
  // @@protoc_insertion_point(field_add:IncludeConstraints.pair)
  return pair_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::Pair >*
IncludeConstraints::mutable_pair() {
  // @@protoc_insertion_point(field_mutable_list:IncludeConstraints.pair)
  return &pair_;
}
inline const ::google::protobuf::RepeatedPtrField< ::Pair >&
IncludeConstraints::pair() const {
  // @@protoc_insertion_point(field_list:IncludeConstraints.pair)
  return pair_;
}

// -------------------------------------------------------------------

// ExcludeConstraints

// repeated .Pair pair = 1;
inline int ExcludeConstraints::pair_size() const {
  return pair_.size();
}
inline void ExcludeConstraints::clear_pair() {
  pair_.Clear();
}
inline const ::Pair& ExcludeConstraints::pair(int index) const {
  // @@protoc_insertion_point(field_get:ExcludeConstraints.pair)
  return pair_.Get(index);
}
inline ::Pair* ExcludeConstraints::mutable_pair(int index) {
  // @@protoc_insertion_point(field_mutable:ExcludeConstraints.pair)
  return pair_.Mutable(index);
}
inline ::Pair* ExcludeConstraints::add_pair() {
  // @@protoc_insertion_point(field_add:ExcludeConstraints.pair)
  return pair_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::Pair >*
ExcludeConstraints::mutable_pair() {
  // @@protoc_insertion_point(field_mutable_list:ExcludeConstraints.pair)
  return &pair_;
}
inline const ::google::protobuf::RepeatedPtrField< ::Pair >&
ExcludeConstraints::pair() const {
  // @@protoc_insertion_point(field_list:ExcludeConstraints.pair)
  return pair_;
}

// -------------------------------------------------------------------

// PriorityConstraints

// repeated .Pair pair = 1;
inline int PriorityConstraints::pair_size() const {
  return pair_.size();
}
inline void PriorityConstraints::clear_pair() {
  pair_.Clear();
}
inline const ::Pair& PriorityConstraints::pair(int index) const {
  // @@protoc_insertion_point(field_get:PriorityConstraints.pair)
  return pair_.Get(index);
}
inline ::Pair* PriorityConstraints::mutable_pair(int index) {
  // @@protoc_insertion_point(field_mutable:PriorityConstraints.pair)
  return pair_.Mutable(index);
}
inline ::Pair* PriorityConstraints::add_pair() {
  // @@protoc_insertion_point(field_add:PriorityConstraints.pair)
  return pair_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::Pair >*
PriorityConstraints::mutable_pair() {
  // @@protoc_insertion_point(field_mutable_list:PriorityConstraints.pair)
  return &pair_;
}
inline const ::google::protobuf::RepeatedPtrField< ::Pair >&
PriorityConstraints::pair() const {
  // @@protoc_insertion_point(field_list:PriorityConstraints.pair)
  return pair_;
}

// -------------------------------------------------------------------

// SchedulingSettingsProvider

// optional bool MaximizeFleetLoad = 1;
inline void SchedulingSettingsProvider::clear_maximizefleetload() {
  maximizefleetload_ = false;
}
inline bool SchedulingSettingsProvider::maximizefleetload() const {
  // @@protoc_insertion_point(field_get:SchedulingSettingsProvider.MaximizeFleetLoad)
  return maximizefleetload_;
}
inline void SchedulingSettingsProvider::set_maximizefleetload(bool value) {
  
  maximizefleetload_ = value;
  // @@protoc_insertion_point(field_set:SchedulingSettingsProvider.MaximizeFleetLoad)
}

// optional int32 WeightFactor = 2;
inline void SchedulingSettingsProvider::clear_weightfactor() {
  weightfactor_ = 0;
}
inline ::google::protobuf::int32 SchedulingSettingsProvider::weightfactor() const {
  // @@protoc_insertion_point(field_get:SchedulingSettingsProvider.WeightFactor)
  return weightfactor_;
}
inline void SchedulingSettingsProvider::set_weightfactor(::google::protobuf::int32 value) {
  
  weightfactor_ = value;
  // @@protoc_insertion_point(field_set:SchedulingSettingsProvider.WeightFactor)
}

// optional int32 IsoRefFactor = 3;
inline void SchedulingSettingsProvider::clear_isoreffactor() {
  isoreffactor_ = 0;
}
inline ::google::protobuf::int32 SchedulingSettingsProvider::isoreffactor() const {
  // @@protoc_insertion_point(field_get:SchedulingSettingsProvider.IsoRefFactor)
  return isoreffactor_;
}
inline void SchedulingSettingsProvider::set_isoreffactor(::google::protobuf::int32 value) {
  
  isoreffactor_ = value;
  // @@protoc_insertion_point(field_set:SchedulingSettingsProvider.IsoRefFactor)
}

// optional int32 RatingFactor = 4;
inline void SchedulingSettingsProvider::clear_ratingfactor() {
  ratingfactor_ = 0;
}
inline ::google::protobuf::int32 SchedulingSettingsProvider::ratingfactor() const {
  // @@protoc_insertion_point(field_get:SchedulingSettingsProvider.RatingFactor)
  return ratingfactor_;
}
inline void SchedulingSettingsProvider::set_ratingfactor(::google::protobuf::int32 value) {
  
  ratingfactor_ = value;
  // @@protoc_insertion_point(field_set:SchedulingSettingsProvider.RatingFactor)
}

// optional int32 TimeFactor = 5;
inline void SchedulingSettingsProvider::clear_timefactor() {
  timefactor_ = 0;
}
inline ::google::protobuf::int32 SchedulingSettingsProvider::timefactor() const {
  // @@protoc_insertion_point(field_get:SchedulingSettingsProvider.TimeFactor)
  return timefactor_;
}
inline void SchedulingSettingsProvider::set_timefactor(::google::protobuf::int32 value) {
  
  timefactor_ = value;
  // @@protoc_insertion_point(field_set:SchedulingSettingsProvider.TimeFactor)
}

// optional int32 TransitionFactor = 6;
inline void SchedulingSettingsProvider::clear_transitionfactor() {
  transitionfactor_ = 0;
}
inline ::google::protobuf::int32 SchedulingSettingsProvider::transitionfactor() const {
  // @@protoc_insertion_point(field_get:SchedulingSettingsProvider.TransitionFactor)
  return transitionfactor_;
}
inline void SchedulingSettingsProvider::set_transitionfactor(::google::protobuf::int32 value) {
  
  transitionfactor_ = value;
  // @@protoc_insertion_point(field_set:SchedulingSettingsProvider.TransitionFactor)
}

// optional int32 PayFactor = 7;
inline void SchedulingSettingsProvider::clear_payfactor() {
  payfactor_ = 0;
}
inline ::google::protobuf::int32 SchedulingSettingsProvider::payfactor() const {
  // @@protoc_insertion_point(field_get:SchedulingSettingsProvider.PayFactor)
  return payfactor_;
}
inline void SchedulingSettingsProvider::set_payfactor(::google::protobuf::int32 value) {
  
  payfactor_ = value;
  // @@protoc_insertion_point(field_set:SchedulingSettingsProvider.PayFactor)
}

// optional int32 LegFactor = 8;
inline void SchedulingSettingsProvider::clear_legfactor() {
  legfactor_ = 0;
}
inline ::google::protobuf::int32 SchedulingSettingsProvider::legfactor() const {
  // @@protoc_insertion_point(field_get:SchedulingSettingsProvider.LegFactor)
  return legfactor_;
}
inline void SchedulingSettingsProvider::set_legfactor(::google::protobuf::int32 value) {
  
  legfactor_ = value;
  // @@protoc_insertion_point(field_set:SchedulingSettingsProvider.LegFactor)
}

// -------------------------------------------------------------------

// SchedulingParameters

// optional bool Ref = 1;
inline void SchedulingParameters::clear_ref() {
  ref_ = false;
}
inline bool SchedulingParameters::ref() const {
  // @@protoc_insertion_point(field_get:SchedulingParameters.Ref)
  return ref_;
}
inline void SchedulingParameters::set_ref(bool value) {
  
  ref_ = value;
  // @@protoc_insertion_point(field_set:SchedulingParameters.Ref)
}

// optional bool Iso = 2;
inline void SchedulingParameters::clear_iso() {
  iso_ = false;
}
inline bool SchedulingParameters::iso() const {
  // @@protoc_insertion_point(field_get:SchedulingParameters.Iso)
  return iso_;
}
inline void SchedulingParameters::set_iso(bool value) {
  
  iso_ = value;
  // @@protoc_insertion_point(field_set:SchedulingParameters.Iso)
}

// optional int32 Rating = 3;
inline void SchedulingParameters::clear_rating() {
  rating_ = 0;
}
inline ::google::protobuf::int32 SchedulingParameters::rating() const {
  // @@protoc_insertion_point(field_get:SchedulingParameters.Rating)
  return rating_;
}
inline void SchedulingParameters::set_rating(::google::protobuf::int32 value) {
  
  rating_ = value;
  // @@protoc_insertion_point(field_set:SchedulingParameters.Rating)
}

// optional string GroupId = 4;
inline void SchedulingParameters::clear_groupid() {
  groupid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& SchedulingParameters::groupid() const {
  // @@protoc_insertion_point(field_get:SchedulingParameters.GroupId)
  return groupid_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SchedulingParameters::set_groupid(const ::std::string& value) {
  
  groupid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:SchedulingParameters.GroupId)
}
inline void SchedulingParameters::set_groupid(const char* value) {
  
  groupid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:SchedulingParameters.GroupId)
}
inline void SchedulingParameters::set_groupid(const char* value, size_t size) {
  
  groupid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:SchedulingParameters.GroupId)
}
inline ::std::string* SchedulingParameters::mutable_groupid() {
  
  // @@protoc_insertion_point(field_mutable:SchedulingParameters.GroupId)
  return groupid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* SchedulingParameters::release_groupid() {
  // @@protoc_insertion_point(field_release:SchedulingParameters.GroupId)
  
  return groupid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SchedulingParameters::set_allocated_groupid(::std::string* groupid) {
  if (groupid != NULL) {
    
  } else {
    
  }
  groupid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), groupid);
  // @@protoc_insertion_point(field_set_allocated:SchedulingParameters.GroupId)
}

// -------------------------------------------------------------------

// Worker

// optional string Id = 1;
inline void Worker::clear_id() {
  id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Worker::id() const {
  // @@protoc_insertion_point(field_get:Worker.Id)
  return id_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Worker::set_id(const ::std::string& value) {
  
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Worker.Id)
}
inline void Worker::set_id(const char* value) {
  
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Worker.Id)
}
inline void Worker::set_id(const char* value, size_t size) {
  
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Worker.Id)
}
inline ::std::string* Worker::mutable_id() {
  
  // @@protoc_insertion_point(field_mutable:Worker.Id)
  return id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Worker::release_id() {
  // @@protoc_insertion_point(field_release:Worker.Id)
  
  return id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Worker::set_allocated_id(::std::string* id) {
  if (id != NULL) {
    
  } else {
    
  }
  id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), id);
  // @@protoc_insertion_point(field_set_allocated:Worker.Id)
}

// optional int32 Cost = 2;
inline void Worker::clear_cost() {
  cost_ = 0;
}
inline ::google::protobuf::int32 Worker::cost() const {
  // @@protoc_insertion_point(field_get:Worker.Cost)
  return cost_;
}
inline void Worker::set_cost(::google::protobuf::int32 value) {
  
  cost_ = value;
  // @@protoc_insertion_point(field_set:Worker.Cost)
}

// optional string Name = 3;
inline void Worker::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Worker::name() const {
  // @@protoc_insertion_point(field_get:Worker.Name)
  return name_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Worker::set_name(const ::std::string& value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Worker.Name)
}
inline void Worker::set_name(const char* value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Worker.Name)
}
inline void Worker::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Worker.Name)
}
inline ::std::string* Worker::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:Worker.Name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Worker::release_name() {
  // @@protoc_insertion_point(field_release:Worker.Name)
  
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Worker::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:Worker.Name)
}

// optional double X = 4;
inline void Worker::clear_x() {
  x_ = 0;
}
inline double Worker::x() const {
  // @@protoc_insertion_point(field_get:Worker.X)
  return x_;
}
inline void Worker::set_x(double value) {
  
  x_ = value;
  // @@protoc_insertion_point(field_set:Worker.X)
}

// optional double Y = 5;
inline void Worker::clear_y() {
  y_ = 0;
}
inline double Worker::y() const {
  // @@protoc_insertion_point(field_get:Worker.Y)
  return y_;
}
inline void Worker::set_y(double value) {
  
  y_ = value;
  // @@protoc_insertion_point(field_set:Worker.Y)
}

// optional .SchedulingParameters Parameters = 6;
inline bool Worker::has_parameters() const {
  return !_is_default_instance_ && parameters_ != NULL;
}
inline void Worker::clear_parameters() {
  if (GetArenaNoVirtual() == NULL && parameters_ != NULL) delete parameters_;
  parameters_ = NULL;
}
inline const ::SchedulingParameters& Worker::parameters() const {
  // @@protoc_insertion_point(field_get:Worker.Parameters)
  return parameters_ != NULL ? *parameters_ : *default_instance_->parameters_;
}
inline ::SchedulingParameters* Worker::mutable_parameters() {
  
  if (parameters_ == NULL) {
    parameters_ = new ::SchedulingParameters;
  }
  // @@protoc_insertion_point(field_mutable:Worker.Parameters)
  return parameters_;
}
inline ::SchedulingParameters* Worker::release_parameters() {
  // @@protoc_insertion_point(field_release:Worker.Parameters)
  
  ::SchedulingParameters* temp = parameters_;
  parameters_ = NULL;
  return temp;
}
inline void Worker::set_allocated_parameters(::SchedulingParameters* parameters) {
  delete parameters_;
  parameters_ = parameters;
  if (parameters) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:Worker.Parameters)
}

// -------------------------------------------------------------------

// Job

// optional string Id = 1;
inline void Job::clear_id() {
  id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Job::id() const {
  // @@protoc_insertion_point(field_get:Job.Id)
  return id_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Job::set_id(const ::std::string& value) {
  
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Job.Id)
}
inline void Job::set_id(const char* value) {
  
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Job.Id)
}
inline void Job::set_id(const char* value, size_t size) {
  
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Job.Id)
}
inline ::std::string* Job::mutable_id() {
  
  // @@protoc_insertion_point(field_mutable:Job.Id)
  return id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Job::release_id() {
  // @@protoc_insertion_point(field_release:Job.Id)
  
  return id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Job::set_allocated_id(::std::string* id) {
  if (id != NULL) {
    
  } else {
    
  }
  id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), id);
  // @@protoc_insertion_point(field_set_allocated:Job.Id)
}

// optional string Start = 2;
inline void Job::clear_start() {
  start_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Job::start() const {
  // @@protoc_insertion_point(field_get:Job.Start)
  return start_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Job::set_start(const ::std::string& value) {
  
  start_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Job.Start)
}
inline void Job::set_start(const char* value) {
  
  start_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Job.Start)
}
inline void Job::set_start(const char* value, size_t size) {
  
  start_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Job.Start)
}
inline ::std::string* Job::mutable_start() {
  
  // @@protoc_insertion_point(field_mutable:Job.Start)
  return start_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Job::release_start() {
  // @@protoc_insertion_point(field_release:Job.Start)
  
  return start_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Job::set_allocated_start(::std::string* start) {
  if (start != NULL) {
    
  } else {
    
  }
  start_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), start);
  // @@protoc_insertion_point(field_set_allocated:Job.Start)
}

// optional string End = 3;
inline void Job::clear_end() {
  end_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Job::end() const {
  // @@protoc_insertion_point(field_get:Job.End)
  return end_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Job::set_end(const ::std::string& value) {
  
  end_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Job.End)
}
inline void Job::set_end(const char* value) {
  
  end_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Job.End)
}
inline void Job::set_end(const char* value, size_t size) {
  
  end_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Job.End)
}
inline ::std::string* Job::mutable_end() {
  
  // @@protoc_insertion_point(field_mutable:Job.End)
  return end_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Job::release_end() {
  // @@protoc_insertion_point(field_release:Job.End)
  
  return end_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Job::set_allocated_end(::std::string* end) {
  if (end != NULL) {
    
  } else {
    
  }
  end_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), end);
  // @@protoc_insertion_point(field_set_allocated:Job.End)
}

// optional int32 Cost = 4;
inline void Job::clear_cost() {
  cost_ = 0;
}
inline ::google::protobuf::int32 Job::cost() const {
  // @@protoc_insertion_point(field_get:Job.Cost)
  return cost_;
}
inline void Job::set_cost(::google::protobuf::int32 value) {
  
  cost_ = value;
  // @@protoc_insertion_point(field_set:Job.Cost)
}

// optional string Name = 5;
inline void Job::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Job::name() const {
  // @@protoc_insertion_point(field_get:Job.Name)
  return name_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Job::set_name(const ::std::string& value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Job.Name)
}
inline void Job::set_name(const char* value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Job.Name)
}
inline void Job::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Job.Name)
}
inline ::std::string* Job::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:Job.Name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Job::release_name() {
  // @@protoc_insertion_point(field_release:Job.Name)
  
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Job::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:Job.Name)
}

// optional double X = 6;
inline void Job::clear_x() {
  x_ = 0;
}
inline double Job::x() const {
  // @@protoc_insertion_point(field_get:Job.X)
  return x_;
}
inline void Job::set_x(double value) {
  
  x_ = value;
  // @@protoc_insertion_point(field_set:Job.X)
}

// optional double Y = 7;
inline void Job::clear_y() {
  y_ = 0;
}
inline double Job::y() const {
  // @@protoc_insertion_point(field_get:Job.Y)
  return y_;
}
inline void Job::set_y(double value) {
  
  y_ = value;
  // @@protoc_insertion_point(field_set:Job.Y)
}

// optional .SchedulingParameters Parameters = 8;
inline bool Job::has_parameters() const {
  return !_is_default_instance_ && parameters_ != NULL;
}
inline void Job::clear_parameters() {
  if (GetArenaNoVirtual() == NULL && parameters_ != NULL) delete parameters_;
  parameters_ = NULL;
}
inline const ::SchedulingParameters& Job::parameters() const {
  // @@protoc_insertion_point(field_get:Job.Parameters)
  return parameters_ != NULL ? *parameters_ : *default_instance_->parameters_;
}
inline ::SchedulingParameters* Job::mutable_parameters() {
  
  if (parameters_ == NULL) {
    parameters_ = new ::SchedulingParameters;
  }
  // @@protoc_insertion_point(field_mutable:Job.Parameters)
  return parameters_;
}
inline ::SchedulingParameters* Job::release_parameters() {
  // @@protoc_insertion_point(field_release:Job.Parameters)
  
  ::SchedulingParameters* temp = parameters_;
  parameters_ = NULL;
  return temp;
}
inline void Job::set_allocated_parameters(::SchedulingParameters* parameters) {
  delete parameters_;
  parameters_ = parameters;
  if (parameters) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:Job.Parameters)
}

// -------------------------------------------------------------------

// Workers

// repeated .Worker workers = 1;
inline int Workers::workers_size() const {
  return workers_.size();
}
inline void Workers::clear_workers() {
  workers_.Clear();
}
inline const ::Worker& Workers::workers(int index) const {
  // @@protoc_insertion_point(field_get:Workers.workers)
  return workers_.Get(index);
}
inline ::Worker* Workers::mutable_workers(int index) {
  // @@protoc_insertion_point(field_mutable:Workers.workers)
  return workers_.Mutable(index);
}
inline ::Worker* Workers::add_workers() {
  // @@protoc_insertion_point(field_add:Workers.workers)
  return workers_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::Worker >*
Workers::mutable_workers() {
  // @@protoc_insertion_point(field_mutable_list:Workers.workers)
  return &workers_;
}
inline const ::google::protobuf::RepeatedPtrField< ::Worker >&
Workers::workers() const {
  // @@protoc_insertion_point(field_list:Workers.workers)
  return workers_;
}

// -------------------------------------------------------------------

// Jobs

// repeated .Job jobs = 1;
inline int Jobs::jobs_size() const {
  return jobs_.size();
}
inline void Jobs::clear_jobs() {
  jobs_.Clear();
}
inline const ::Job& Jobs::jobs(int index) const {
  // @@protoc_insertion_point(field_get:Jobs.jobs)
  return jobs_.Get(index);
}
inline ::Job* Jobs::mutable_jobs(int index) {
  // @@protoc_insertion_point(field_mutable:Jobs.jobs)
  return jobs_.Mutable(index);
}
inline ::Job* Jobs::add_jobs() {
  // @@protoc_insertion_point(field_add:Jobs.jobs)
  return jobs_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::Job >*
Jobs::mutable_jobs() {
  // @@protoc_insertion_point(field_mutable_list:Jobs.jobs)
  return &jobs_;
}
inline const ::google::protobuf::RepeatedPtrField< ::Job >&
Jobs::jobs() const {
  // @@protoc_insertion_point(field_list:Jobs.jobs)
  return jobs_;
}

#endif  // !PROTOBUF_INLINE_NOT_IN_HEADERS
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_scheduler_2eproto__INCLUDED
